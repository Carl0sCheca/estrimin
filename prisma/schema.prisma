generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

enum Role {
  USER
  ADMIN
}

enum ChannelWatchOnly {
  ALL
  REGISTERED_USERS
  ALLOWLIST
  PASSWORD
}

model User {
  id                      String             @id
  name                    String             @unique @db.Citext
  email                   String
  emailVerified           Boolean
  image                   String?
  createdAt               DateTime
  updatedAt               DateTime
  role                    Role               @default(USER)
  sessions                Session[]
  accounts                Account[]
  Channel                 Channel?
  channelAllowListUsersId Int?
  ChannelAllowList        ChannelAllowList[] @relation("UserChannels")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Channel {
  id                Int                @id @default(autoincrement())
  token             String
  userId            String             @unique
  watchOnly         ChannelWatchOnly   @default(ALL)
  watchOnlyPassword String?
  disabled          Boolean            @default(false)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelAllowList  ChannelAllowList[] @relation("ChannelUsers")

  @@map("channel")
}

model ChannelAllowList {
  id        Int     @id @default(autoincrement())
  channelId Int
  userId    String
  Channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade, name: "ChannelUsers")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserChannels")

  @@unique([channelId, userId])
  @@map("channelAllowList")
}

model Setting {
  name  String @id
  value String

  @@map("setting")
}

model RegistrationCodes {
  id             String   @id
  used           Boolean
  createdAt      DateTime
  expirationDate DateTime

  @@map("registrationLink")
}
